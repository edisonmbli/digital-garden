generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  id            String               @id @default(cuid())
  nameEn        String               @map("name_en")
  nameZh        String               @map("name_zh")
  slug          String
  descriptionEn String?              @map("description_en")
  descriptionZh String?              @map("description_zh")
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  coverImageUrl String?
  isFeatured    Boolean              @default(false)
  sanityId      String               @unique @map("sanity_id")
  deletedAt     DateTime?
  isDeleted     Boolean              @default(false)
  posts         PostsOnCollections[]

  @@index([isFeatured])
  @@index([isDeleted])
}

model DevCollection {
  id            String                    @id @default(cuid())
  nameEn        String                    @map("name_en")
  nameZh        String                    @map("name_zh")
  slug          String
  descriptionEn String?                   @map("description_en")
  descriptionZh String?                   @map("description_zh")
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  coverImageUrl String?                   @map("cover_image_url")
  isFeatured    Boolean                   @default(false)
  sanityId      String                    @unique @map("sanity_id")
  deletedAt     DateTime?                 @map("deleted_at")
  isDeleted     Boolean                   @default(false) @map("is_deleted")
  posts         PostsOnDevCollections[]

  @@index([isFeatured])
  @@index([isDeleted])
  @@index([slug])
  @@map("dev_collections")
}

model Post {
  id               String                    @id @default(cuid())
  authorId         String
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  contentType      String
  sanityDocumentId String                    @unique @map("sanity_document_id")
  deletedAt        DateTime?
  isDeleted        Boolean                   @default(false)
  comments         Comment[]
  likes            Like[]
  logs             Log[]
  photo            Photo?
  author           User                      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  collections      PostsOnCollections[]
  devCollections   PostsOnDevCollections[]

  @@index([contentType])
  @@index([authorId])
  @@index([isDeleted])
}

model Log {
  id          String    @id @default(cuid())
  postId      String
  title       String
  publishedAt DateTime?
  tags        String[]
  excerpt     String?
  language    String
  slug        String
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, language])
  @@index([language])
  @@index([publishedAt])
}

model Photo {
  id              String  @id @default(cuid())
  postId          String  @unique
  sanityAssetId   String?
  descriptionJson String?
  titleJson       String?
  post            Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model User {
  id        String    @id
  email     String    @unique
  name      String?
  avatarUrl String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
  posts     Post[]
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Comment {
  id             String                 @id @default(cuid())
  content        String
  postId         String
  userId         String
  parentId       String?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  deletedAt      DateTime?
  ipAddress      String?
  isDeleted      Boolean                @default(false)
  isPinned       Boolean                @default(false)
  userAgent      String?
  deletedBy      String?
  deletedReason  String?
  isAuthorReply  Boolean                @default(false)
  moderatedAt    DateTime?
  moderatedBy    String?
  pinnedAt       DateTime?
  pinnedBy       String?
  status         CommentStatus          @default(PENDING)
  parent         Comment?               @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies        Comment[]              @relation("CommentReplies")
  post           Post                   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user           User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  moderationLogs CommentModerationLog[]

  @@index([postId, status])
  @@index([status])
  @@index([isPinned])
  @@index([isDeleted])
  @@index([createdAt])
  @@index([ipAddress])
}

model PostsOnCollections {
  postId       String
  collectionId String
  assignedAt   DateTime   @default(now())
  assignedBy   String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  post         Post       @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, collectionId])
}

model PostsOnDevCollections {
  postId          String
  devCollectionId String        @map("dev_collection_id")
  assignedAt      DateTime      @default(now()) @map("assigned_at")
  assignedBy      String        @map("assigned_by")
  devCollection   DevCollection @relation(fields: [devCollectionId], references: [id], onDelete: Cascade)
  post            Post          @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, devCollectionId])
  @@map("posts_on_dev_collections")
}

model WebhookCall {
  id           String   @id @default(cuid())
  operation    String
  documentType String
  documentId   String
  success      Boolean  @default(true)
  error        String?
  createdAt    DateTime @default(now())

  @@index([createdAt])
  @@index([operation, documentType])
}

model CommentModerationLog {
  id              String        @id @default(cuid())
  commentId       String
  moderatorId     String
  createdAt       DateTime      @default(now())
  contentSnapshot String
  moderatorName   String?
  reason          String?
  action          CommentStatus
  comment         Comment       @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([commentId])
  @@index([moderatorId])
  @@index([action])
  @@index([createdAt])
}

model SpamDetectionLog {
  id           String   @id @default(cuid())
  ipAddress    String?
  userId       String?
  content      String
  createdAt    DateTime @default(now())
  confidence   Float?
  isSpam       Boolean
  reason       String?
  triggerRules String[]
  userAgent    String?

  @@index([isSpam])
  @@index([ipAddress])
  @@index([userId])
  @@index([createdAt])
}

model SensitiveWord {
  id        String   @id @default(cuid())
  word      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([word])
}

model AnalyticsEvent {
  id              String   @id @default(cuid())
  eventName       String   @map("event_name") // 事件名称
  timestamp       DateTime // 事件发生时间
  date            DateTime @db.Date // 日期字段，用于分区和清理
  sessionId       String   @map("session_id") // 会话ID
  userId          String?  // 用户ID（可选）
  page            String   // 页面路径
  referrer        String?  // 来源页面
  userAgent       String   @map("user_agent") // 用户代理
  ip              String   // IP地址
  country         String   // 国家
  
  // JSON 字段存储复杂数据
  properties      Json?    // 事件属性
  performance     Json?    // 性能指标
  
  // 服务端处理信息
  processedAt     DateTime @default(now()) @map("processed_at")
  serverTimestamp BigInt   @map("server_timestamp") // 服务端时间戳
  environment     String   @default("production") // 环境标识
  createdAt       DateTime @default(now()) @map("created_at")

  // 索引优化
  @@index([date, eventName]) // 按日期和事件类型查询
  @@index([sessionId])       // 会话分析
  @@index([userId])          // 用户行为分析
  @@index([environment])     // 环境隔离
  @@index([page])
  @@map("analytics_events")
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  DELETED
}
