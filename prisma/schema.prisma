generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  id            String               @id @default(cuid())
  name          String
  slug          String
  description   String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  coverImageUrl String?
  isFeatured    Boolean              @default(false)
  language      String
  sanityI18nId  String               @map("sanity_i18n_id")
  sanityId      String               @map("sanity_id")
  deletedAt     DateTime?
  isDeleted     Boolean              @default(false)
  posts         PostsOnCollections[]

  @@unique([sanityI18nId, language])
  @@index([language])
  @@index([isFeatured])
  @@index([isDeleted])
}

model Post {
  id               String               @id @default(cuid())
  authorId         String
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  contentType      String
  sanityDocumentId String               @unique @map("sanity_document_id")
  deletedAt        DateTime?
  isDeleted        Boolean              @default(false)
  comments         Comment[]
  likes            Like[]
  logs             Log[]
  photo            Photo?
  author           User                 @relation(fields: [authorId], references: [id], onDelete: Cascade)
  collections      PostsOnCollections[]

  @@index([contentType])
  @@index([authorId])
  @@index([isDeleted])
}

model Log {
  id          String    @id @default(cuid())
  postId      String
  title       String
  publishedAt DateTime?
  tags        String[]
  excerpt     String?
  language    String
  slug        String
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, language])
  @@index([language])
  @@index([publishedAt])
}

model Photo {
  id              String  @id @default(cuid())
  postId          String  @unique
  sanityAssetId   String?
  descriptionJson String?
  titleJson       String?
  post            Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model User {
  id        String    @id
  email     String    @unique
  name      String?
  avatarUrl String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
  posts     Post[]
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Comment {
  id             String                 @id @default(cuid())
  content        String
  postId         String
  userId         String
  parentId       String?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  deletedAt      DateTime?
  ipAddress      String?
  isDeleted      Boolean                @default(false)
  isPinned       Boolean                @default(false)
  userAgent      String?
  deletedBy      String?
  deletedReason  String?
  isAuthorReply  Boolean                @default(false)
  moderatedAt    DateTime?
  moderatedBy    String?
  pinnedAt       DateTime?
  pinnedBy       String?
  status         CommentStatus          @default(PENDING)
  parent         Comment?               @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies        Comment[]              @relation("CommentReplies")
  post           Post                   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user           User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  moderationLogs CommentModerationLog[]

  @@index([postId, status])
  @@index([status])
  @@index([isPinned])
  @@index([isDeleted])
  @@index([createdAt])
  @@index([ipAddress])
}

model PostsOnCollections {
  postId       String
  collectionId String
  assignedAt   DateTime   @default(now())
  assignedBy   String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  post         Post       @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, collectionId])
}

model WebhookCall {
  id           String   @id @default(cuid())
  operation    String
  documentType String
  documentId   String
  success      Boolean  @default(true)
  error        String?
  createdAt    DateTime @default(now())

  @@index([createdAt])
  @@index([operation, documentType])
}

model CommentModerationLog {
  id              String        @id @default(cuid())
  commentId       String
  moderatorId     String
  createdAt       DateTime      @default(now())
  contentSnapshot String
  moderatorName   String?
  reason          String?
  action          CommentStatus
  comment         Comment       @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([commentId])
  @@index([moderatorId])
  @@index([action])
  @@index([createdAt])
}

model SpamDetectionLog {
  id           String   @id @default(cuid())
  ipAddress    String?
  userId       String?
  content      String
  createdAt    DateTime @default(now())
  confidence   Float?
  isSpam       Boolean
  reason       String?
  triggerRules String[]
  userAgent    String?

  @@index([isSpam])
  @@index([ipAddress])
  @@index([userId])
  @@index([createdAt])
}

model SensitiveWord {
  id        String   @id @default(cuid())
  word      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([word])
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  DELETED
}
